#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;

uniform mat4 view;
uniform mat4 model;
uniform mat4 projection;

uniform vec3 lightPos;
uniform vec3 viewPos;

out vec3 lightingColor;

void main()
{
	gl_Position = projection * view * model * vec4(aPos, 1.0);
	
	vec3 objectColor = vec3(1.0f, 0.1f, 0.1f);
	vec3 lightColor = vec3(1.0f, 1.0f, 1.0f);
	
    vec3 fragPos = vec3(model * vec4(aPos, 1.0));
    vec3 Normal = mat3(transpose(inverse(model))) * aNormal;
    
	vec3 ambientLight = 0.1 * lightColor;
	
	vec3 norm = normalize(Normal);
	vec3 lightDirection = normalize(lightPos - fragPos);
	vec3 diffuseLight = max(dot(norm, lightDirection), 0.0) * lightColor;
	
	vec3 viewDirection = normalize(viewPos - fragPos);
	vec3 reflectDirection = reflect(-lightDirection, norm);
	vec3 specularLight = 7 * pow(max(dot(viewDirection, reflectDirection), 0.0), 64) * lightColor;

    lightingColor = ambientLight + diffuseLight + specularLight;
}
